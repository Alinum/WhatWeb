#!/usr/bin/env ruby1.9.1
=begin

.$$$     $.                                   .$$$     $.         
$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$. 
$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.
$ `$     $$$ $ `$  $$$ $ `$  $$$ $$' $ `$ `$$ $ `$     $$$ $ `$      $ `$  $$$'
$. $     $$$ $. $$$$$$ $. $$$$$$ `$  $. $  :' $. $     $$$ $. $$$$   $. $$$$$.
$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$
$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$
$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$'


WhatWeb - Next generation web scanner.
Author: Andrew Horton aka urbanadventurer. Security Consultant for Security-Assessment.com
 
Homepage: http://www.morningstarsecurity.com/research/whatweb

Copyright 2009-2011 Andrew Horton <andrew.horton at security-assessment dot com>

This file is part of WhatWeb.

WhatWeb is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

WhatWeb is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with WhatWeb.  If not, see <http://www.gnu.org/licenses/>.
=end


#require 'profile' 
require 'getoptlong'
require 'pp'
require 'cgi'
require 'thread'
require 'iconv'
require 'tempfile'
require 'rbconfig'  # detect environment, e.g. windows or linux
require 'resolv'
require 'resolv-replace' # asynchronous DNS

### ruby 1.9 changes
if RUBY_VERSION =~ /^1\.9/
        require 'digest/md5'
else
        require 'md5'
	require 'net/https'
end

### gem detection & loading
def gem_available?(gemname)
  gem_available_new_rubygems?(gemname) or gem_available_old_rubygems?(gemname)
end

def gem_available_old_rubygems?(gemname)
  Gem.available?(gemname)
end

def gem_available_new_rubygems?(gemname)
  Gem::Specification.methods.include?(:find_all_by_name) and not Gem::Specification.find_all_by_name(gemname).empty?
 end

gems = %w|json mongo rchardet aurelian-ruby-ahocorasick|

gems.each do |thisgem|
	begin
		require 'rubygems' # rubygems is optional
		if gem_available?(thisgem) # 			
			to_require=thisgem
      to_require='ahocorasick' if thisgem=='aurelian-ruby-ahocorasick'
      require to_require
		end
	rescue LoadError
		# that failed.. no big deal
	end
end


## set up load paths - must be before loading lib/ files
# add the directory of the file currently being executed to the load path
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__))) unless
    $:.include?(File.dirname(__FILE__)) || $LOAD_PATH.include?(File.expand_path(File.dirname(__FILE__)))
$LOAD_PATH << "/usr/share/whatweb/"

# if __FILE__ is a symlink then follow *every* symlink
if File.symlink?(__FILE__)
  require 'pathname'
  $LOAD_PATH << File.dirname( Pathname.new(__FILE__).realpath )
end

require 'lib/benchmark.rb'
require 'lib/target.rb'
require 'lib/plugins.rb'
require 'lib/output.rb'
require 'lib/colour.rb'
require 'lib/tld.rb'
require 'lib/opener.rb'
require 'lib/processor.rb'
require 'lib/scanner.rb'
require 'lib/output_processor.rb'
require 'lib/file_pile.rb'
# look through LOAD_PATH for the following plugin directories. Could be in same dir as whatweb or /usr/share/whatweb, etc
PLUGIN_DIRS=[ "plugins", "my-plugins"].map {|x| $LOAD_PATH.map {|y| y+"/"+x if File.exists?(y+"/"+x) } }.flatten.compact





# nothing says pro-developer like using global variables
$VERSION="0.4.8"
$WWDEBUG = false # raise exceptions in plugins, etc
$verbose=0 # $VERBOSE is reserved in ruby
$USE_EXAMPLE_URLS=false
$use_colour="auto"
$USER_AGENT="WhatWeb/#{$VERSION}"
$MAX_THREADS=25
$AGGRESSION=1
$FOLLOW_REDIRECT="always"
$MAX_REDIRECTS=10
$USE_PROXY=false
$PROXY_HOST=nil
$PROXY_PORT=8080
$PROXY_USER=nil
$PROXY_PASS=nil
$URL_PREFIX=""
$URL_SUFFIX=""
$URL_PATTERN=nil
$NO_THREADS=false
$HTTP_OPEN_TIMEOUT=15
$HTTP_READ_TIMEOUT=30
$WAIT=nil
$OUTPUT_ERRORS=nil
$QUIET=false
$CUSTOM_HEADERS={}
$BASIC_AUTH_USER=nil
$BASIC_AUTH_PASS=nil
$PLUGIN_TIMES=Hash.new(0)
$NO_ERRORS=false



def error(s)
	return if $NO_ERRORS
	if defined?($semaphore)
		# We want the output mutex locked.
		# Has our current thread already locked the Mutex?
		begin
			$semaphore.lock
		rescue ThreadError
			# we're already locked. Nice.		
		end
	end
	if ($use_colour=="auto") or ($use_colour=="always")
		STDERR.puts red(s)
	else
		STDERR.puts s
	end
	STDERR.flush
	unless $OUTPUT_ERRORS.nil?
		$OUTPUT_ERRORS.out(s)
	end
	$semaphore.unlock if defined?($semaphore)
end

# takes a string and returns an array of lines. used by plugin_info
def word_wrap(s,width=10)
	ret=[]
	line=""
	s.split.map {|x|
		word=x
		if line.size + x.size + 1 <= width
			line += x + " "
		else
			if word.size > width
				ret << line
				line = ""
				w=word.clone
				while w.size > width
					ret << w[0..(width-1)]
					w=w[width.to_i..-1]
				end
				ret << w unless w.size == 0
			else
				ret << line
				line=x + " "
			end
		end		
 	}
	ret << line
	ret
end

### core



def usage()
puts"
.$$$     $.                                   .$$$     $.         
$$$$     $$. .$$$  $$$ .$$$$$$.  .$$$$$$$$$$. $$$$     $$. .$$$$$$$. .$$$$$$. 
$ $$     $$$ $ $$  $$$ $ $$$$$$. $$$$$ $$$$$$ $ $$     $$$ $ $$   $$ $ $$$$$$.
$ `$     $$$ $ `$  $$$ $ `$  $$$ $$' $ `$ `$$ $ `$     $$$ $ `$      $ `$  $$$'
$. $     $$$ $. $$$$$$ $. $$$$$$ `$  $. $  :' $. $     $$$ $. $$$$   $. $$$$$.
$::$  .  $$$ $::$  $$$ $::$  $$$     $::$     $::$  .  $$$ $::$      $::$  $$$$
$;;$ $$$ $$$ $;;$  $$$ $;;$  $$$     $;;$     $;;$ $$$ $$$ $;;$      $;;$  $$$$
$$$$$$ $$$$$ $$$$  $$$ $$$$  $$$     $$$$     $$$$$$ $$$$$ $$$$$$$$$ $$$$$$$$$'

"
puts "WhatWeb - Next generation web scanner.\nVersion #{$VERSION} by Andrew Horton aka urbanadventurer from Security-Assessment.com"
puts "Homepage: http://www.morningstarsecurity.com/research/whatweb"
puts
puts "Usage: whatweb [options] <URLs>"
puts "
TARGET SELECTION:
  <URLs>\t\tEnter URLs, filenames or nmap-format IP ranges.
\t\t\tUse /dev/stdin to pipe HTML directly
  --input-file=FILE, -i\tIdentify URLs found in FILE, eg. -i /dev/stdin
  --url-prefix\t\tAdd a prefix to target URLs
  --url-suffix\t\tAdd a suffix to target URLs
  --url-pattern\t\tInsert the targets into a URL. Requires --input-file,
\t\t\teg. www.example.com/%insert%/robots.txt 
  --example-urls, -e\tAdd example URLs for each selected plugin to the target
\t\t\tlist. By default will add example URLs for all plugins.

AGGRESSION LEVELS:
  --aggression, -a=LEVEL The aggression level controls the trade-off between
\t\t\tspeed/stealth and reliability. Default: 1
\t\t\tAggression levels are:
\t1 (Passive)\tMake one HTTP request per target. Except for redirects.
\t2 (Polite)\tReserved for future use
\t3 (Aggressive)\tTriggers aggressive plugin functions only when a
\t\t\tplugin matches passively.
\t4 (Heavy)\tTrigger aggressive functions for all plugins. Guess a
\t\t\tlot of URLs like Nikto.

HTTP OPTIONS:
  --user-agent, -U=AGENT Identify as AGENT instead of WhatWeb/#{$VERSION}.
  --user, -u=<user:password> HTTP basic authentication
  --header, -H\t\tAdd an HTTP header. eg \"Foo:Bar\". Specifying a default
\t\t\theader will replace it. Specifying an empty value, eg.
\t\t\t\"User-Agent:\" will remove the header.
  --follow-redirect=WHEN Control when to follow redirects. WHEN may be `never',
\t\t\t`http-only', `meta-only', `same-site', `same-domain'
\t\t\tor `always'. Default: #{$FOLLOW_REDIRECT}
  --max-redirects=NUM\tMaximum number of contiguous redirects. Default: 10

PROXY:
  --proxy\t\t<hostname[:port]> Set proxy hostname and port
\t\t\tDefault: #{$PROXY_PORT}
  --proxy-user\t\t<username:password> Set proxy user and password

PLUGINS:
  --plugins, -p\t\tComma delimited set of selected plugins. Default is all.
\t\t\tEach element can be a directory, file or plugin name and
\t\t\tcan optionally have a modifier, eg. + or -
\t\t\tExamples: +/tmp/moo.rb,+/tmp/foo.rb
\t\t\ttitle,md5,+./plugins-disabled/
\t\t\t./plugins-disabled,-md5
\t\t\t-p + is a shortcut for -p +plugins-disabled
  --list-plugins, -l\tList the plugins
  --info-plugins, -I\tDisplay information for all plugins. Optionally search
\t\t\twith keywords in a comma delimited list.
  --grep, -g\t\tSearch for a string. Reports in a plugin called Grep
  --custom-plugin\tDefine a custom plugin called Custom-Plugin,
\t\t\tExamples: \":text=>'powered by abc'\"
\t\t\t\":regexp=>/powered[ ]?by ab[0-9]/\"
\t\t\t\":ghdb=>'intitle:abc \\\"powered by abc\\\"'\"
\t\t\t\":md5=>'8666257030b94d3bdb46e05945f60b42'\"
\t\t\t\"{:text=>'powered by abc'},{:regexp=>/abc [ ]?1/i}\"
  --dorks\t\t<plugin name>\tList google dorks for the selected plugin

LOGGING & OUTPUT:
  --verbose, -v\t\tIncrease verbosity, use twice for plugin development.
  --colour,--color=WHEN\tcontrol whether colour is used. WHEN may be `never',
\t\t\t`always', or `auto'
  --quiet, -q\t\tDo not display brief logging to STDOUT
  --log-brief=FILE\tLog brief, one-line output
  --log-verbose=FILE\tLog verbose output
  --log-xml=FILE\tLog XML format
  --log-json=FILE\tLog JSON format
  --log-sql=FILE\tLog SQL INSERT statements
  --log-sql-create=FILE\tCreate SQL database tables
  --log-json-verbose=FILE Log JSON Verbose format
  --log-magictree=FILE\tLog MagicTree XML format
  --log-object=FILE\tLog Ruby object inspection format
  --log-mongo-database\tName of the MongoDB database
  --log-mongo-collection Name of the MongoDB collection. Default: whatweb
  --log-mongo-host\tMongoDB hostname or IP address. Default: 0.0.0.0
  --log-mongo-username\tMongoDB username. Default: nil
  --log-mongo-password\tMongoDB password. Default: nil
  --log-errors=FILE\tLog errors
  --no-errors\t\tSuppress error messages

PERFORMANCE & STABILITY:
  --max-threads, -t\tNumber of simultaneous threads. Default: #{$MAX_THREADS}.
  --open-timeout\tTime in seconds. Default: #{$HTTP_OPEN_TIMEOUT}
  --read-timeout\tTime in seconds. Default: #{$HTTP_READ_TIMEOUT}
  --aho-corasick\tbuild Aho-Corasick prefix dictionary for speed
  --wait=SECONDS\tWait SECONDS between connections
  --benchmark\tShow benchmarking info
\t\t\tThis is useful when using a single thread.

HELP & MISCELLANEOUS:
  --help, -h\t\tThis help
  --debug\t\tRaise errors in plugins
  --version\t\tDisplay version information. (WhatWeb #{$VERSION})

EXAMPLE USAGE:
  whatweb example.com
  whatweb -v example.com
  whatweb -a 3 example.com
  whatweb 192.168.1.0/24
\n"

	suggestions=""
	suggestions << "To enable JSON logging install the json gem.\n" unless gem_available?('json')
	suggestions << "To enable MongoDB logging install the mongo gem.\n" unless gem_available?('mongo')
	suggestions << "To enable character set detection and MongoDB logging install the rchardet gem.\n" unless gem_available?('rchardet')
  suggestions << "To enable aho-corasick pre-checking install the aurelian-ruby-ahocorasick gem.\n" unless gem_available?('aurelian-ruby-ahocorasick')

	unless suggestions.empty?
		print "\nOPTIONAL DEPENDENCIES\n--------------------------------------------------------------------------------\n" + suggestions + "\n"
	end
end



if ARGV.size==0 # faster usage info
	usage
	exit 
end

plugin_selection=nil
use_custom_plugin=false
use_custom_grep_plugin=false
input_file=nil
output_list = []
mongo={}
mongo[:use_mongo_log]=false
opts={}
opts[:output_plugins]=[]

parse = GetoptLong.new(
      [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
      [ '-v','--verbose', GetoptLong::NO_ARGUMENT ],
      [ '-l','--list-plugins', GetoptLong::NO_ARGUMENT ],
      [ '-p','--plugins', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-I','--info-plugins', GetoptLong::OPTIONAL_ARGUMENT ],
      [ '--dorks', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-e','--example-urls', GetoptLong::NO_ARGUMENT ],
      [ '--colour','--color', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-object', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-brief', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-xml', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-json', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-json-verbose', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-magictree', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-verbose', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-mongo-collection', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-mongo-host', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-mongo-database', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-mongo-username', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-mongo-password', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-sql', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-sql-create', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--log-errors', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--no-errors', GetoptLong::NO_ARGUMENT ],
      [ '-i','--input-file', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-U','--user-agent', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-a','--aggression', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-t','--max-threads', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--follow-redirect', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--max-redirects', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--proxy', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--proxy-user', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--url-prefix', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--url-suffix', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--url-pattern', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--custom-plugin', GetoptLong::REQUIRED_ARGUMENT ],
      [ '-g','--grep', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--open-timeout', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--read-timeout', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--header','-H', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--user','-u', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--wait', GetoptLong::REQUIRED_ARGUMENT ],
      [ '--debug', GetoptLong::NO_ARGUMENT ],
      [ '--version', GetoptLong::NO_ARGUMENT ],
      [ '--aho-corasick', GetoptLong::NO_ARGUMENT],
      [ '--benchmark', GetoptLong::NO_ARGUMENT],
      [ '-q','--quiet', GetoptLong::NO_ARGUMENT]
    )

begin

	parse.each do |opt, arg|
		case opt
			when '-i','--input-file'
				opts[:input_file]=arg
			when '-l','--list-plugins'
				PluginSupport.load_plugins
				PluginSupport.plugin_list
				exit
			when '-p','--run-plugins'
				plugin_selection=arg
			when '-I','--info-plugins'                
				PluginSupport.load_plugins
				PluginSupport.plugin_info(arg.split(","))
				exit
			when '--dorks'
				PluginSupport.load_plugins
				PluginSupport.plugin_dorks(arg)
				exit
			when '-e','--example-urls'
				$USE_EXAMPLE_URLS=true
			when '--color','--colour'
				case arg
					when 'auto'
						opts[:color]="auto"
					when 'always'
						opts[:color]="always"
					when 'never'
						opts[:color]=false
					else
						raise("--colour argument not recognized")
					end
			when '--log-object'
				opts[:output_plugins] << OutputObject.new(arg)
			when '--log-brief'
			 	opts[:output_plugins] << OutputBrief.new(arg)
			when '--log-xml'
			 	opts[:output_plugins] << OutputXML.new(arg)
			when '--log-magictree'
				opts[:output_plugins] << OutputMagicTreeXML.new(arg)
			when '--log-verbose'
				opts[:output_plugins] << OutputVerbose.new(arg)
			when '--log-sql'
			 	opts[:output_plugins] << OutputSQL.new(arg)
			when '--log-sql-create'
				PluginSupport.load_plugins("+")
				# delete the file if it already exists
				begin
					File.delete(arg)
				rescue
				end
			 	OutputSQL.new(arg).create_tables
				puts "SQL CREATE statements written to #{arg}"
				exit
			when '--log-json'
				if defined?(JSON)
			 		opts[:output_plugins] << OutputJSON.new(arg)
				else
					raise("Sorry. The JSON gem is required for JSON output")
				end
			when '--log-json-verbose'
				if defined?(JSON)
			 		opts[:output_plugins] << OutputJSONVerbose.new(arg)
				else
					raise("Sorry. The JSON gem is required for JSONVerbose output")
				end
			when '--log-mongo-collection'
				if defined?(Mongo) and defined?(CharDet)
					opts[:mongo_collection]=arg
			    opts[:use_mongo_log]=true
				else
					raise("Sorry. The mongo and rchardet gems are required for Mongo output")
				end

			when '--log-mongo-host'
				if defined?(Mongo) and defined?(CharDet)
			 		opts[:mongo_host]=arg
					opts[:use_mongo_log]=true
				else
					raise("Sorry. The mongo and rchardet gems are required for Mongo output")
				end

			when '--log-mongo-database'
				if defined?(Mongo) and defined?(CharDet)
			 		opts[:mongo_database]=arg
					opts[:use_mongo_log]=true
				else
					raise("Sorry. The mongo and rchardet gems are required for Mongo output")
				end
			when '--log-mongo-username'
				if defined?(Mongo) and defined?(CharDet)
			 		opts[:mongo_username]=arg
					opts[:use_mongo_log]=true
				else
					raise("Sorry. The mongo and rchardet gems are required for Mongo output")
				end
			when '--log-mongo-password'
				if defined?(Mongo) and defined?(CharDet)
			 		opts[:mongo_password]=arg
					opts[:use_mongo_log]=true
				else
					raise("Sorry. The mongo and rchardet gems are required for Mongo output")
				end
			when '--log-errors'
			 	opts[:output_errors] = OutputErrors.new(arg)
			when '--no-errors'
			 	opts[:no_errors]=true
			when '-U','--user-agent'
				opts[:user_agent]=arg
			when '-t','--max-threads'
				opts[:threads]=arg.to_i
			when '-a','--aggression'
				opts[:aggression]=arg.to_i
			when '--proxy'
				opts[:use_proxy] = true
				opts[:proxy_host] = arg.to_s.split(":")[0]
				opts[:proxy_port] = arg.to_s.split(":")[1].to_i if arg.to_s.include?(":")		
			when '--proxy-user'
				$PROXY_USER=arg.to_s.split(":")[0]
				$PROXY_PASS=arg.to_s.scan(/^[^:]*:(.+)/).to_s if arg =~ /^[^:]*:(.+)/
			when '-q','--quiet'
				opts[:quiet]=true
			when '--url-prefix'
				opts[:url_prefix]=arg
			when '--url-suffix'
			  opts[:url_suffix]=arg
			when '--url-pattern'
				opts[:url_pattern]=arg
			when '--custom-plugin'
				opts[:custom_plugin]=true if PluginSupport.custom_plugin(arg)
			when '--grep','-g'
				opts[:custom_grep_plugin]=true if PluginSupport.custom_plugin(arg,"grep")
			when '--follow-redirect'
				if ["never","http-only","meta-only","same-site","same-domain","always"].include?(arg.downcase)
					opts[:follow_redirect]=arg.downcase
				else
					raise("Invalid --follow-redirect parameter.")
				end
			when '--max-redirects'
				opts[:max_redirects]=arg.to_i
			when '--open-timeout'					
				opts[:open_timeout]=arg.to_i
			when '--read-timeout'					
				opts[:read_timeout]=arg.to_i
			when '--wait'
			  opts[:wait] = arg.to_i
			when '-H','--header'
				begin
					x=arg.scan(/([^:]+):(.*)/).flatten
					raise if x.empty?
          opts[:customer_headers]={}
					opts[:customer_headers][x.first]=x.last
				rescue
					raise("Invalid --header parameter.")
				end
			when '-u','--user'
				opts[:auth_user]=arg.split(":").first
				opts[:auth_pass]=arg.to_s.scan(/^[^:]*:(.+)/).to_s if arg =~ /^[^:]*:(.+)/
      when '--aho-corasick'
        if defined?(AhoCorasick)
          require 'lib/aho_corasick'
          opts[:enable_aho_corasick]=true
        else
          raise "Sorry, the ahocorasick gem is required for Aho-Corasick support"
        end
      when '--benchmark'
        opts[:benchmark]=true
        opts[:stats]={}
      when '--debug'
				opts[:debug]=true
			when '-h','--help'
				usage
				exit
			when '-v','--verbose'
				opts[:verbose]=opts[:verbose].to_i+1
			when '--version'
				puts "WhatWeb version #{$VERSION} ( http://www.morningstarsecurity.com/research/whatweb/ )"
				exit
		end
	end		
rescue Errno::EPIPE
	exit
rescue StandardError, GetoptLong::Error => err
	puts
	usage
	puts err
	exit
end

# sanity check # Disable colours in Windows environments
if Config::CONFIG['host_os'] =~ /mswin|mingw/
	opts[:color] = false
end

### PLUGINS
plugin_selection += ",Custom-Plugin" if opts[:use_custom_plugin] and opts[:plugin_selection]
plugin_selection += ",Grep" if opts[:use_custom_grep_plugin] and opts[:plugin_selection]
opts[:plugins] = WhatWeb::PluginSupport.load_plugins(plugin_selection ) 

# sanity check # no plugins?
if opts[:plugins].size == 0
	error "No plugins selected, exiting."
	exit 1
end
# optimise plugins
WhatWeb::PluginSupport.precompile_regular_expressions 

### OUTPUT
opts[:output_plugins] << WhatWeb::OutputBrief.new unless $QUIET # by default output brief
opts[:output_plugins] << WhatWeb::OutputObject.new() if $verbose > 1 # full output if -vv
opts[:output_plugins] << WhatWeb::OutputVerbose.new() if $verbose > 0 # full output if -v

## output dependencies
if opts[:use_mongo_log]
	if opts[:plugins].keys.include?("Charset")
		opts[:output_plugins] << WhatWeb::OutputMongo.new(mongo) 
	else
		error("MongoDB logging requires the Charset plugin to be activated. The Charset plugin is the slowest whatweb plugin, it not included by default, and resides in the plugins-disabled folder. Use ./whatweb -p +./plugins-disabled/Charset.rb to enable it.")
		exit
	end
end
output=WhatWeb::OutputProcessor.new(opts)
opts[:callback_only]=true
opts[:on_result_callback]=Proc.new{|target, result| output.out(target,target.status,result)}
opts[:on_error_callback]=Proc.new{|error| output.error(error)}
opts[:argv]=ARGV
scanner=WhatWeb::Scanner.new(opts)
scanner.start

# shutdown plugins
Plugin.registered_plugins.map {|name,plugin| plugin.shutdown }
output.close
if opts[:benchmark]
  puts "BENCHMARKING:"
  WhatWeb::Benchmark.results.each do |label,m|
    next if m[:runs].zero?
    puts "#{label} #{m[:runs]} #{m[:total]} #{m[:total]/m[:runs]}"
  
  end
  stats=[]
  opts[:stats].each {|k,v| stats << [k,v]}
  stats.sort!{|a,b| a[1]<=>b[1]}
  stats.each do |s|
    puts "#{s[0]}: #{s[1]}"
  end
end

STDOUT.flush
#pp $PLUGIN_TIMES.sort_by {|x,y|y }

